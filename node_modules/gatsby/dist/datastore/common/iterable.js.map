{"version":3,"sources":["../../../src/datastore/common/iterable.ts"],"names":["GatsbyIterable","constructor","source","Symbol","iterator","concat","other","concatSequence","map","fn","mapSequence","filter","predicate","filterSequence","forEach","callback","value","first","second"],"mappings":";;;;;AAEO,MAAMA,cAAN,CAAsD;AAC3DC,EAAAA,WAAW,CAASC,MAAT,EAA8B;AAAA,SAArBA,MAAqB,GAArBA,MAAqB;AAAE;;AAE3B,GAAfC,MAAM,CAACC,QAAQ,IAAiB;AAC/B,WAAO,KAAKF,MAAZ;AACD;;AAEDG,EAAAA,MAAM,CAAIC,KAAJ,EAA+C;AACnD,WAAO,IAAIN,cAAJ,CAAmBO,cAAc,CAAC,IAAD,EAAOD,KAAP,CAAjC,CAAP;AACD;;AAEDE,EAAAA,GAAG,CAAIC,EAAJ,EAA4C;AAC7C,WAAO,IAAIT,cAAJ,CAAmBU,WAAW,CAAC,IAAD,EAAOD,EAAP,CAA9B,CAAP;AACD;;AAEDE,EAAAA,MAAM,CAACC,SAAD,EAAsD;AAC1D,WAAO,IAAIZ,cAAJ,CAAsBa,cAAc,CAAC,IAAD,EAAOD,SAAP,CAApC,CAAP;AACD;;AAEDE,EAAAA,OAAO,CAACC,QAAD,EAAwC;AAC7C,SAAK,MAAMC,KAAX,IAAoB,IAApB,EAA0B;AACxBD,MAAAA,QAAQ,CAACC,KAAD,CAAR;AACD;AACF;;AAvB0D;;;;AA0B7D,UAAUN,WAAV,CACER,MADF,EAEEO,EAFF,EAGe;AACb,OAAK,MAAMO,KAAX,IAAoBd,MAApB,EAA4B;AAC1B,UAAMO,EAAE,CAACO,KAAD,CAAR;AACD;AACF;;AAED,UAAUH,cAAV,CACEX,MADF,EAEEU,SAFF,EAGe;AACb,OAAK,MAAMI,KAAX,IAAoBd,MAApB,EAA4B;AAC1B,QAAIU,SAAS,CAACI,KAAD,CAAb,EAAsB;AACpB,YAAMA,KAAN;AACD;AACF;AACF;;AAED,UAAUT,cAAV,CACEU,KADF,EAEEC,MAFF,EAGmB;AACjB,OAAK,MAAMF,KAAX,IAAoBC,KAApB,EAA2B;AACzB,UAAMD,KAAN;AACD;;AACD,OAAK,MAAMA,KAAX,IAAoBE,MAApB,EAA4B;AAC1B,UAAMF,KAAN;AACD;AACF","sourcesContent":["import { IGatsbyIterable } from \"../types\"\n\nexport class GatsbyIterable<T> implements IGatsbyIterable<T> {\n  constructor(private source: Iterator<T>) {}\n\n  [Symbol.iterator](): Iterator<T> {\n    return this.source\n  }\n\n  concat<U>(other: Iterable<U>): GatsbyIterable<T | U> {\n    return new GatsbyIterable(concatSequence(this, other))\n  }\n\n  map<U>(fn: (entry: T) => U): GatsbyIterable<U> {\n    return new GatsbyIterable(mapSequence(this, fn))\n  }\n\n  filter(predicate: (entry: T) => unknown): GatsbyIterable<T> {\n    return new GatsbyIterable<T>(filterSequence(this, predicate))\n  }\n\n  forEach(callback: (entry: T) => unknown): void {\n    for (const value of this) {\n      callback(value)\n    }\n  }\n}\n\nfunction* mapSequence<T, U>(\n  source: Iterable<T>,\n  fn: (arg: T) => U\n): Iterator<U> {\n  for (const value of source) {\n    yield fn(value)\n  }\n}\n\nfunction* filterSequence<T>(\n  source: Iterable<T>,\n  predicate: (arg: T) => unknown\n): Iterator<T> {\n  for (const value of source) {\n    if (predicate(value)) {\n      yield value\n    }\n  }\n}\n\nfunction* concatSequence<T, U = T>(\n  first: Iterable<T>,\n  second: Iterable<U>\n): Iterator<U | T> {\n  for (const value of first) {\n    yield value\n  }\n  for (const value of second) {\n    yield value\n  }\n}\n"],"file":"iterable.js"}